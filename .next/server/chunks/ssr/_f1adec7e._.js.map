{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/newsletter/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { z } from \"zod\";\n\nconst newsletterFormSchema = z.object({\n  email: z.string().email({ message: \"Please enter a valid email address.\" }),\n});\n\nexport type NewsletterFormState = {\n  message: string;\n  success: boolean;\n};\n\nexport async function submitNewsletter(\n  prevState: NewsletterFormState,\n  formData: FormData\n): Promise<NewsletterFormState> {\n  const validatedFields = newsletterFormSchema.safeParse({\n    email: formData.get(\"email\"),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      message: \"Please enter a valid email address.\",\n      success: false,\n    };\n  }\n  \n  // Here you would typically integrate with an email marketing service like Mailchimp or SendGrid.\n  console.log(\"Newsletter subscription for:\", validatedFields.data.email);\n\n  return {\n    message: \"Thank you for subscribing! Please check your inbox to confirm.\",\n    success: true,\n  };\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEA,MAAM,uBAAuB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;QAAE,SAAS;IAAsC;AAC3E;AAOO,eAAe,iBACpB,SAA8B,EAC9B,QAAkB;IAElB,MAAM,kBAAkB,qBAAqB,SAAS,CAAC;QACrD,OAAO,SAAS,GAAG,CAAC;IACtB;IAEA,IAAI,CAAC,gBAAgB,OAAO,EAAE;QAC5B,OAAO;YACL,SAAS;YACT,SAAS;QACX;IACF;IAEA,iGAAiG;IACjG,QAAQ,GAAG,CAAC,gCAAgC,gBAAgB,IAAI,CAAC,KAAK;IAEtE,OAAO;QACL,SAAS;QACT,SAAS;IACX;AACF;;;IAtBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/founders-corner/actions.ts"],"sourcesContent":["\n\"use server\";\n\nimport { z } from \"zod\";\n\nconst founderFormSchema = z.object({\n  name: z.string().min(2, { message: \"Name must be at least 2 characters.\" }),\n  company: z.string().optional(),\n  email: z.string().email({ message: \"Please enter a valid email address.\" }),\n  question: z.string().min(10, { message: \"Question must be at least 10 characters.\" }),\n});\n\nexport type FounderFormState = {\n  message: string;\n  success: boolean;\n};\n\nexport async function submitFounderForm(\n  prevState: FounderFormState,\n  formData: FormData\n): Promise<FounderFormState> {\n  const validatedFields = founderFormSchema.safeParse({\n    name: formData.get(\"name\"),\n    company: formData.get(\"company\"),\n    email: formData.get(\"email\"),\n    question: formData.get(\"question\"),\n  });\n\n  if (!validatedFields.success) {\n    const errorMessages = validatedFields.error.issues.map(issue => issue.message).join(' ');\n    return {\n      message: `Please correct the following errors: ${errorMessages}`,\n      success: false,\n    };\n  }\n  \n  // Here you would typically save the question to a database or send a notification.\n  console.log(\"Founder question received:\", validatedFields.data);\n\n  return {\n    message: \"Thank you for your submission! Your question has been received.\",\n    success: true,\n  };\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,oBAAoB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjC,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAsC;IACzE,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC5B,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;QAAE,SAAS;IAAsC;IACzE,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI;QAAE,SAAS;IAA2C;AACrF;AAOO,eAAe,kBACpB,SAA2B,EAC3B,QAAkB;IAElB,MAAM,kBAAkB,kBAAkB,SAAS,CAAC;QAClD,MAAM,SAAS,GAAG,CAAC;QACnB,SAAS,SAAS,GAAG,CAAC;QACtB,OAAO,SAAS,GAAG,CAAC;QACpB,UAAU,SAAS,GAAG,CAAC;IACzB;IAEA,IAAI,CAAC,gBAAgB,OAAO,EAAE;QAC5B,MAAM,gBAAgB,gBAAgB,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA,QAAS,MAAM,OAAO,EAAE,IAAI,CAAC;QACpF,OAAO;YACL,SAAS,CAAC,qCAAqC,EAAE,eAAe;YAChE,SAAS;QACX;IACF;IAEA,mFAAmF;IACnF,QAAQ,GAAG,CAAC,8BAA8B,gBAAgB,IAAI;IAE9D,OAAO;QACL,SAAS;QACT,SAAS;IACX;AACF;;;IA1BsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/founders-corner/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {submitNewsletter as '6035dd0bfd11cb3e1355fde6346f9d475c3d79d9d9'} from 'ACTIONS_MODULE0'\nexport {submitFounderForm as '60dbbc7c7c2c83d8733ae316536fd85512c73e621d'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/founders-corner/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/founders-corner/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/founders-corner/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoS,GACjU,kEACA","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/founders-corner/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/founders-corner/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/founders-corner/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgR,GAC7S,8CACA","debugId":null}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}