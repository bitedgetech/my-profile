{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/newsletter/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { z } from \"zod\";\n\nconst newsletterFormSchema = z.object({\n  email: z.string().email({ message: \"Please enter a valid email address.\" }),\n});\n\nexport type NewsletterFormState = {\n  message: string;\n  success: boolean;\n};\n\nexport async function submitNewsletter(\n  prevState: NewsletterFormState,\n  formData: FormData\n): Promise<NewsletterFormState> {\n  const validatedFields = newsletterFormSchema.safeParse({\n    email: formData.get(\"email\"),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      message: \"Please enter a valid email address.\",\n      success: false,\n    };\n  }\n  \n  // Here you would typically integrate with an email marketing service like Mailchimp or SendGrid.\n  console.log(\"Newsletter subscription for:\", validatedFields.data.email);\n\n  return {\n    message: \"Thank you for subscribing! Please check your inbox to confirm.\",\n    success: true,\n  };\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEA,MAAM,uBAAuB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;QAAE,SAAS;IAAsC;AAC3E;AAOO,eAAe,iBACpB,SAA8B,EAC9B,QAAkB;IAElB,MAAM,kBAAkB,qBAAqB,SAAS,CAAC;QACrD,OAAO,SAAS,GAAG,CAAC;IACtB;IAEA,IAAI,CAAC,gBAAgB,OAAO,EAAE;QAC5B,OAAO;YACL,SAAS;YACT,SAAS;QACX;IACF;IAEA,iGAAiG;IACjG,QAAQ,GAAG,CAAC,gCAAgC,gBAAgB,IAAI,CAAC,KAAK;IAEtE,OAAO;QACL,SAAS;QACT,SAAS;IACX;AACF;;;IAtBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/team-builder/actions.ts"],"sourcesContent":["\n\"use server\";\n\nimport { z } from \"zod\";\n\nconst teamBuilderFormSchema = z.object({\n  skills: z.preprocess((val) => (Array.isArray(val) ? val : [val]), z.array(z.string()).min(1, { message: 'You have to select at least one skill.' })),\n  availability: z.enum(['full-time', 'part-time', 'hourly']),\n  budget: z.string(),\n  name: z.string().min(2, { message: \"Name must be at least 2 characters.\" }),\n  email: z.string().email({ message: \"Please enter a valid email address.\" }),\n  company: z.string().optional(),\n  description: z.string().min(10, { message: \"Project description must be at least 10 characters.\" }),\n});\n\nexport type TeamBuilderFormState = {\n  message: string;\n  success: boolean;\n};\n\nexport async function submitTeamBuilderForm(\n  prevState: TeamBuilderFormState,\n  formData: FormData\n): Promise<TeamBuilderFormState> {\n\n  const validatedFields = teamBuilderFormSchema.safeParse({\n    skills: formData.getAll(\"skills\"),\n    availability: formData.get(\"availability\"),\n    budget: formData.get(\"budget\"),\n    name: formData.get(\"name\"),\n    email: formData.get(\"email\"),\n    company: formData.get(\"company\"),\n    description: formData.get(\"description\"),\n  });\n\n  if (!validatedFields.success) {\n    const errorMessages = validatedFields.error.issues.map(issue => issue.message).join(' ');\n    return {\n      message: `Please correct the following errors: ${errorMessages}`,\n      success: false,\n    };\n  }\n  \n  // Here you would typically send an email, save to a database, etc.\n  // For this example, we'll just simulate a successful submission.\n  console.log(\"Team builder proposal received:\", validatedFields.data);\n\n  return {\n    message: \"Thank you for your submission! We will review your requirements and send a detailed proposal to your email shortly.\",\n    success: true,\n  };\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEA,MAAM,wBAAwB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,QAAQ,oIAAA,CAAA,IAAC,CAAC,UAAU,CAAC,CAAC,MAAS,MAAM,OAAO,CAAC,OAAO,MAAM;YAAC;SAAI,EAAG,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,oIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,GAAG,CAAC,GAAG;QAAE,SAAS;IAAyC;IACjJ,cAAc,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAa;QAAa;KAAS;IACzD,QAAQ,oIAAA,CAAA,IAAC,CAAC,MAAM;IAChB,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAsC;IACzE,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;QAAE,SAAS;IAAsC;IACzE,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC5B,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI;QAAE,SAAS;IAAsD;AACnG;AAOO,eAAe,sBACpB,SAA+B,EAC/B,QAAkB;IAGlB,MAAM,kBAAkB,sBAAsB,SAAS,CAAC;QACtD,QAAQ,SAAS,MAAM,CAAC;QACxB,cAAc,SAAS,GAAG,CAAC;QAC3B,QAAQ,SAAS,GAAG,CAAC;QACrB,MAAM,SAAS,GAAG,CAAC;QACnB,OAAO,SAAS,GAAG,CAAC;QACpB,SAAS,SAAS,GAAG,CAAC;QACtB,aAAa,SAAS,GAAG,CAAC;IAC5B;IAEA,IAAI,CAAC,gBAAgB,OAAO,EAAE;QAC5B,MAAM,gBAAgB,gBAAgB,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA,QAAS,MAAM,OAAO,EAAE,IAAI,CAAC;QACpF,OAAO;YACL,SAAS,CAAC,qCAAqC,EAAE,eAAe;YAChE,SAAS;QACX;IACF;IAEA,mEAAmE;IACnE,iEAAiE;IACjE,QAAQ,GAAG,CAAC,mCAAmC,gBAAgB,IAAI;IAEnE,OAAO;QACL,SAAS;QACT,SAAS;IACX;AACF;;;IA/BsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/team-builder/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {submitNewsletter as '6035dd0bfd11cb3e1355fde6346f9d475c3d79d9d9'} from 'ACTIONS_MODULE0'\nexport {submitTeamBuilderForm as '6030d7e4a8bc57027e60fc39bcbbf3264f41e5c8a5'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/team-builder/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/team-builder/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/team-builder/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiS,GAC9T,+DACA","debugId":null}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/team-builder/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/team-builder/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/team-builder/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6Q,GAC1S,2CACA","debugId":null}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}